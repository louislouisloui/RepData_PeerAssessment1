swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v$[,c(1,2)]
svd2$v[,c(1,2)]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1])%*%svd1$d[1]%*%(svd1$d[1])
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2])%*%(diag(svd1$d[1:2]))%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a5 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
s
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data("concrete")
install.packages('caret')
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
library(caret)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
library(ggplot2)
ggplot(data=inTrain, aes(x=Superplasticizer, y = CompressiveStrength))+geom_bar(stat = 'identity')
training<- mixtures[inTrain,]
ggplot(data=training, aes(x=Superplasticizer, y = CompressiveStrength))+geom_bar(stat = 'identity')
ggplot(data=training, aes(x=Superplasticizer, y = CompressiveStrength))+geom_histogram()
ggplot(data=training, aes(y = CompressiveStrength))+geom_histogram()
ggplot(data=training, aes(x = CompressiveStrength))+geom_histogram()
ggplot(data=training, aes(x = Superplasticizer))+geom_histogram()
ggplot(data=training, aes(x = log(Superplasticizer+1)))+geom_histogram()
ggplot(data=training)+geom_histogram(aes(x = log(Superplasticizer+1)), alpha(=0.5))+geom_histogram(aes(x = Superplasticizer, alpha(=0.5))
ggplot(data=training)+geom_histogram(aes(x = log(Superplasticizer+1)), alpha(=0.5))+geom_histogram(aes(x = Superplasticizer), alpha(=0.5))
ggplot(data=training)+geom_histogram(aes(x = log(Superplasticizer+1)), alpha=0.5)+geom_histogram(aes(x = Superplasticizer), alpha(=0.5))
ggplot(data=training)+geom_histogram(aes(x = log(Superplasticizer+1)), alpha=0.5)+geom_histogram(aes(x = Superplasticizer), alpha=0.5)
ggplot(data=training)+geom_histogram(aes(x = Superplasticizer), alpha=0.5)
ggplot(data=training, aes(x = log(Superplasticizer+1)))+geom_histogram()
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p =3/4)[[1]]
training <- addata[intrain,]
training <- addata[inTrain,]
training <- adData[inTrain,]
grep(training$names,pattern = ".IL")
grep(training$names,pattern = "IL")
grep(training$names,pattern = ".Il")
head(training$names)
grep(names(training),pattern = ".Il")
head(names(training))
grep(names(training),pattern = "^Il")
grep(names(training),pattern = "^IL")
ILs <- training[,grep(names(training), pattern="^IL")]
?preProcess
ILs_preprocess <- preProcess(ILs, method = "pca")
svd(ILs_preprocess)
ILs_preprocess <- preProcess(ILs, method = "pca", list = false)
svd(ILs_preprocess)
ILs_preprocess <- preProcess(ILs, method = "pca")[[1]]
svd(ILs_preprocess)
head(ILs_preprocess)
ILs_preprocess
ILs_preprocess <- preProcess(ILs, method = "pca", thresh = 0.8)[[1]]
ILs_preprocess <- preProcess(ILs, method = "pca", thresh = 0.8)
svd(ILs)
svd(ILs)$d
svd(ILs)$d/sum(svd(ILs)$d)
ILs_preprocess <- preProcess(ILs, method = "pca", thresh = 0.8)
ILs_preprocess
pca<-train(diagnosis~ILs_preprocess, method=@glm)
pca<-train(diagnosis~ILs_preprocess, method="glm")
pca<-train(diagnosis~ILs_preprocess[[1]], method="glm")
pca<-train(diagnosis~ILs, method="glm", preProcess(method="pca", thresg=0.8))
?train
?predict
preProc <- predict(ILs_preprocess, training[,grep(names(training), pattern="^IL")])
modelFitPCA <- train(data = preProc, training$diagnosis~., method="glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modelFitPCA <- train(data = preProc, training$diagnosis~., method="glm")
training[,grep(names(training), pattern="^IL")]
modelFit <- train(data = training, training$diagnosis~.,method="glm")
modelFit <- train(data = training, training$diagnosis ~ . ,method="glm")
modelFitPCA <- train(training$diagnosis~., method="glm",data = preProc)
modelFitPCA <- train(as;vector(training$diagnosis)~., method="glm",data = preProc)
modelFitPCA <- train(as.vector(training$diagnosis)~., method="glm",data = preProc)
training$diagnosis<- as.character(training$diagnosis)
modelFitPCA <- train(as.vector(training$diagnosis)~., method="glm",data = preProc)
modelFit <- train(data = training, training$diagnosis ~ . ,method="glm")
modelFit <- train(x = training[,-1], y=training$diagnosis,method="glm")
modelFitPCA <- train(y=training$diagnosis, x = preProc, method="glm")
modelFitPCA
modelFit <- train(y=training$diagnosis, x = ILs, method="glm")
modelFit
modelFit <- train(data=training,training$diagnosis~., method="glm")
modelFit
modelFit <- train(data=training,diagnosis~., method="glm")
modelFit
testin <- adData[-inTrain,]
confusionMatrix(testin$diagnosis, predict(modelFit,newdata = testin))
confusionMatrix(testin$diagnosis, predict(modelFitPCA,newdata = testin))
confusionMatrix(testin$diagnosis, predict(modelFitPCA,newdata = testin))
modelFit <- train(y=training$diagnosis,x=ILs, method="glm")
confusionMatrix(testin$diagnosis, predict(modelFit,newdata = testin))
modelFitPCA <- train(y=training$diagnosis, x = preProc, method="glm")
confusionMatrix(testin$diagnosis, predict(modelFitPCA,newdata = testin))
modelFitPCA
modelFitPCA
modelFitPCA$preProcess
library(caret)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
train <- createDataPartition(y=segmentationOriginal$Case,list = FALSE,p=0.7)
training <- segmentationOriginal[train,]
testing <- segmentationOriginal[-train,]
set.seed(125)
train <- createDataPartition(y=segmentationOriginal$Case,list = FALSE,p=0.7)
training <- segmentationOriginal[train,]
testing <- segmentationOriginal[-train,]
modFit <- train(data(=training, Case~., method='cart'))
modFit <- train(data=training, Case~., method='cart')
modFit <- train(data=training, Case~., method='rpart')
modFit$modelInfo
modFit$modelInf
modFit$finalModel
install.packages('pgmm')
library(pgmm)
data("olive")
train2 <- createDataPartition(olive$Area, lsit=False, p=0.7)
train2 <- createDataPartition(olive$Area, lsit=FALSE, p=0.7)
train2 <- createDataPartition(olive$Area, list=FALSE, p=0.7)
training2 <- olive[train2,]
testing2 <- olive[-train2,]
modFit2 <- train(data = training2, Area ~., method = 'rpart')
newdata <- data.frame(t(colMeans(olive)))
predict(modFit2,newdata)
View(newdata)
newdata <- as.data.frame(t(colMeans(olive)))
predict(modFit2,newdata)
predict(modFit2,newdata=newdata)
modFit <- train(data=training, Class~., method='rpart')
modFit$finalModel
olive<- olive[,-1]
training2 <- olive[train2,]
train2 <- createDataPartition(olive$Area, list=FALSE, p=0.7)
training2 <- olive[train2,]
modFit2 <- train(data = training2, Area ~., method = 'rpart')
newdata <- as.data.frame(t(colMeans(olive)))
predict(modFit2,newdata=newdata)
set.seed(125)
modFit <- train(data=training, Class~., method='rpart')
modFit$finalModel
train <- createDataPartition(y=segmentationOriginal$Class,list = FALSE,p=0.7)
training <- segmentationOriginal[train,]
modFit <- train(data=training, Class~., method='rpart')
modFit$finalModel
library(MASS)
library(ISLR)
install.packages('ISLR')
library(ISLR)
?fix
fix(Boston)
lm.fit <- lm(medv~lstat+age, data=Boston)
summary(lm.fit)
lm.fit <- lm(medv~., data=Boston)
summary(lm.fit)
names(lm.fit)
names(summary)
names(summary(lm.fit))
install.packages('car')
install.packages("car")
install.packages("car")
install.packages("car")
library(car)
library(car)
library(MASS)
library(ISLR)
lm.fit  <- lm(medv~., data=Boston)
vif(lm.fit)
plot(lstat,mdev)
plot(lstat,mdev, data=Boston)
plot(Boston$lstat,Boston$medv)
pairs(Boston)
pairs(Boston[,1:4])
?matrix
matrix(rep(1,6), nrow = 2, ncol=3)
dim(matrix(rep(1,6), nrow = 2, ncol=3))
?sample
sample(1:4,replace=T)
install.packages('elementstatlearn')
install.packages('elemstatlearn')
install.packages('ElemStatLearn')
library(ElemStatLearn)
dim(ozone)
str(ozone)
data(ozone, package="ElemStatLearn")
summary(ozone)
str(ozone)
library(AppliedPredictiveModeling);
data(segmentationOriginal);
library(caret)
str(segmentationOriginal)
grep(pattern = "class",x = names(segmentationOriginal))
training  <- createDataPartition(segmentationOriginal, p=0.5, list=FALSE)
training  <- createDataPartition(y=segmentationOriginal, p=0.7<, list=FALSE)
training  <- createDataPartition(y=segmentationOriginal, p=0.7, list=FALSE)
training  <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
train  <- segmentationOriginal[training,]
modelfit  <- train(Case ~., method="CART", data = train)
modelfit  <- train(Case ~., method="rpart", data = train)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modelfit$finalModel)
library(ggplot2)
fancyRpartPlot(modelfit$finalModel)
install.package("rpart.plot")
install.packages("rpart.plot")
load("/Volumes/DISK_IMG/ml.RData")
install.packages("shiny")
library(shiny)
library(plotly)
library(plotly)
a <- plot_ly(data = mtcars, x = ~hp, y = ~mpg, type = "scatter", mode = "markers")
b <- plot_ly(data = mtcars, y = ~mpg, color = ~cyl)
subplot(a,b)
library(plotly)
a <- plot_ly(data = mtcars, x = ~hp, y = ~mpg, type = "scatter", mode = "markers")
b <- plot_ly(data = mtcars, y = ~mpg, color = ~cyl, type = "box")
subplot(a,b)
library(plotly)
a <- plot_ly(data = mtcars, x = ~hp, y = ~mpg, type = "scatter", mode = "markers")
b <- plot_ly(data = mtcars, y = ~mpg, color = ~I(as.factor(cyl)), type = "box")
subplot(a,b)
library(plotly)
a <- plot_ly(data = mtcars, x = ~hp, y = ~mpg, type = "scatter", mode = "markers")
b <- plot_ly(data = mtcars, y = ~mpg, color = ~(as.factor(cyl)), type = "box")
subplot(a,b)
library(plotly)
library(dplyr)
a <- plot_ly(data = mtcars, x = ~hp, y = ~mpg, type = "scatter", mode = "markers") %>% layout(title = "Mpg by cyl")
b <- plot_ly(data = mtcars, y = ~mpg, color = ~(as.factor(cyl)), type = "box")
subplot(a,b)
library(plotly)
library(dplyr)
a <- plot_ly(data = mtcars, x = ~hp, y = ~mpg, type = "scatter", mode = "markers") %>% layout(title = "Mpg by hp")
b <- plot_ly(data = mtcars, y = ~mpg, color = ~(as.factor(cyl)), type = "box") %>% layout(title = "Mpg by cyl")
subplot(a,b)
model <-  lm(data = mtcars, mpf ~cyl*I(as.Factor(hp)))
model$coefficicient
model <-  lm(data = mtcars, mpg ~cyl*I(as.Factor(hp)))
model <-  lm(data = mtcars, mpg ~cyl*I(as.factor(hp)))
model$coefficients
model <-  lm(data = mtcars, mpg ~hp*I(as.factor(cyl)))
model$coefficients
model$coefficients[1:3]
model$coefficients[1:34]
model$coefficients[1:4]
model <-  lm(data = mtcars, mpg ~hp*I(as.factor(cyl))-1)
model$coefficients[1:4]
model$model
summary(model)
library(ggplot2)
g <- ggplot(data=mtcars, aes(x=hp,y=mpg))+geom_point(aes(fill=mtcars$cyl))+geom_smooth(method = "lm")
ggplotly(g)
library(ggplot2)
g <- ggplot(data=mtcars, aes(x=hp,y=mpg))+geom_point(aes(fill=as.factor(mtcars$cyl))+geom_smooth(method = "lm")
ggplotly(g)
library(ggplot2)
g <- ggplot(data=mtcars, aes(x=hp,y=mpg, color = as.factor(cyl)))+geom_point())+geom_smooth(method = "lm", se=FALSE)
ggplotly(g)
library(ggplot2)
g <- ggplot(data=mtcars, aes(x=hp,y=mpg, color = as.factor(cyl)))+geom_point()+geom_smooth(method = "lm", se=FALSE)
ggplotly(g)
summary(model)$[2]
summary(model)[2]
summary(model)$coef
summary(model)$coef[1:4]
summary(model)$coef[1:4,]
setwd(dir = "Documents/coursera/reproducible_research/week2/")
setwd(dir = "RepData_PeerAssessment1/")
dt <- read.csv(file = "activity.csv", na.strings = "NA")
str(dt)
summary(dt)
?as.Date
dt[,date]  <- as.Date(dt[,date], format = "%Y-%m-%d")
dt[,"date"]  <- as.Date(dt[,"date"], format = "%Y-%m-%d")
summary(dt)
library(dplyr)
library(plotly)
dt <- tbl_df(dt)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
ggplotly(data = dt1, x = date, y=total_step)
plotly(data = dt1, x = date, y=total_step)
?plotly
plot_ly(data = dt1, x = date, y=total_step)
str(dt1)
plot_ly(data = dt1, x = dt1$date, y=dt1$total_step)
plot_ly(data = dt1, x = dt1$date, y=dt1$total_step, type=bar)
plot_ly(data = dt1, x = dt1$date, y=dt1$total_step, type='bar')
install.packages("xtable")
library(xtable)
xt (summar(dt))
xt  <- (summar(dt))
xt  <- (summary(dt))
print(xt, type = 'html')
print(xtable(str(dt)),"html")
str(dt)
print(xtable(str(dt)),"html")
str(dt)
print(xtable(summary(dt)),"html")
str(dt)
?mean
dt2 <-dt %>% group_by(date) %>% summarize(mean = mean(steps), median = median(steps))
plot_ly( data = dt2$dt2, x = dt2$date, y = dt2$mean) %>% add_trade(y = dt2$median, barmode = 'group')
plot_ly( data = dt2, x = dt2$date, y = dt2$mean) %>% add_trade(y = dt2$median, barmode = 'group')
plot_ly( data = dt2, x = dt2$date, y = dt2$mean) %>% add_trace(y = dt2$median, barmode = 'group')
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median, barmode = 'group')
str(dt2)
mean(dt$steps)
median(dt$steps)
median(dt$steps, na.rm = TRUE)
dt2 <-dt %>% group_by(date) %>% summarize(mean = mean(steps), median(steps, na.rm = TRUE))
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, mode = 'bar') %>% add_trace(y = dt2$median, barmode = 'group')
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median, barmode = 'group')
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group')
str(dt2)
dt2 <-dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps, na.rm = TRUE))
str(dt2)
dt2 <-dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps, na.rm = TRUE))
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, mode = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group)
dt2 <-dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps, na.rm = TRUE))
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, mode = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2
library(dplyr)
library(xtable)
dt <- read.csv(file = "activity.csv", na.strings = "NA")
dt[,"date"]  <- as.Date(dt[,"date"], format = "%Y-%m-%d")
dt <- tbl_df(dt)
str(dt)
# Chunk 3
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
plot_ly(data = dt1, x = dt1$date, y=dt1$total_step, type='bar')
dt2 <-dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps, na.rm = TRUE))
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2
library(dplyr)
library(xtable)
dt <- read.csv(file = "activity.csv", na.strings = "NA")
dt[,"date"]  <- as.Date(dt[,"date"], format = "%Y-%m-%d")
dt <- tbl_df(dt)
str(dt)
# Chunk 3
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
plot_ly(data = dt1, x = dt1$date, y=dt1$total_step, type='bar')
dt2 <- dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps, na.rm = TRUE))
str(dt2)
plot(dt2$median)
hist(dt$2median)
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group)
)
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group')
?median
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
plot_ly(data = dt1, x = dt1$steps type='bar')
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
plot_ly(data = dt1, x = dt1$steps, type='bar')
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
plot_ly(data = dt1, x = dt1$total_steps type='bar')
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_step = sum(steps))
plot_ly(data = dt1, x = dt1$total_steps, type='bar')
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_steps = sum(steps))
plot_ly(data = dt1, x = dt1$total_steps, type='bar')
library(plotly)
dt1 <- dt %>% group_by(date) %>% summarize(total_steps = sum(steps))
plot_ly(data = dt1, x = dt1$total_steps, type='histogram')
head(dt2$median)
dt2 <- dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps))
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar') %>% add_trace(y = dt2$median) %>% layout(barmode = 'group')
dt2 <- dt %>% group_by(date) %>% summarize('mean' = mean(steps), 'median' = median(steps))
plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar', name = "mean") %>% add_trace(y = dt2$median, name = "median") %>% layout(barmode = 'group')
dt %>% group_by(date) %>% summarize('median' = median(steps))
View(dt %>% group_by(date) %>% summarize('median' = median(steps)))
View(dt)
median(dt[date == '2012-10-18,'steps])
median(dt[date == '2012-10-18,'steps''])
median(dt[date == '2012-10-18,'steps'])
median(dt[date == '2012-10-18','steps'])
dt[date == '2012-10-18','steps']
dt[dt$date == '2012-10-18','steps']
median(dt[dt$date == '2012-10-18','steps']x = )
median(dt[dt$date == '2012-10-18','steps'] )
median(dt[dt$date == '2012-10-18','steps']$steps )
View(dt[dt$date == '2012-10-18','steps'])
install.packages('miscTools')
library(miscTools)
colMedians(dt[dt$date == '2012-10-18','steps'])
coldMedians(dt$steps)
colMedians(dt$steps)
colMedians(dt)
str(dt)
dt2 <- dt %>% group_by(date) %>% summarize(total_steps = sum(steps))
dt2.mean <- mean(dt2)
dt2.median <- meadian(dt2)
# plot_ly( data = dt2, x = dt2$date, y = dt2$mean, type = 'bar', name = "mean") %>% add_trace(y = dt2$median, name = "median") %>% layout(barmode = 'group')
dt3 <- dt %>% group_by(date) %>% summarize('mean' = mean(steps))
plot_ly( data = dt3, x = dt3$date, y = dt3$mean, type = 'scatter', mode = 'lines')
?max
dt4 <- dt %>% group_by(interval) %>% summarize('mean' = mean(steps))
interval.max <- dt4 %>% filter(dt4$mean = max(dt4$mean)) %>% rownames()
interval.max <- dt4 %>% filter(dt4$mean == max(dt4$mean)) %>% rownames()
interval.max
interval.max <- dt4 %>% filter(dt4$mean == max(dt4$mean))
interval.max
max(dt4$mean)
str(dt4)
View(dt4)
?mean
dt4 <- dt %>% group_by(interval) %>% summarize('mean' = mean(steps, na.rm =TRUE))
interval.max <- dt4 %>% filter(dt4$mean == max(dt4$mean))
interval.max
install.packages('imputation')
library(imputation)
?knn
knn
install.packages("class")
library(class)
dt.train <- dt %>% filter(!is.na(steps))
dt.test <- dt %>% filter(is.na(steps))
knn(dt.train, dt.test, k = 5)
dt.train.label  <- dt %>% filter(!is.na(steps)) %>% select(steps)
knn(dt.train, dt.test, dt.train.label, k = 5)
knn(train = dt.train, test = dt.test, cl =dt.train.label, k = 5)
install.packages()
install.packages('impute')
train <- dt %>% filter(is.na(steps))
knn <- train(data = train, steps ~., method ='knn')
library(caret)
knn <- train(data = train, steps ~., method ='knn')
str(train)
train <- dt %>% filter(!is.na(steps))
knn <- train(data = train, steps ~., method ='knn')
knn
predict(object = knn, newdata = )
test <- dt %>% filter(is.na(steps))
predict(object = knn, newdata = test)
dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse('wday'<6,'weed','weekend'))
library(lubridate)
dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse('wday'<6,'weed','weekend'))
library(lubridate)
library(ggplot2)
dt7 <- dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse('wday'<6,'weed','weekend'))
dt7 <- dt7 %>% group_by(days, interval) %>% summarize('mean_steps' = mean(steps, na.rm = TRUE))
g <- ggplot(data = dt7, aes(x = interval, y = mean_steps)) + geom_line() + facet_grid(days~.)
ggplotly(g)
library(lubridate)
library(ggplot2)
dt7 <- dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse('wday'<6,'weed','weekend'))
dt7 <- dt7 %>% group_by(days, interval) %>% summarize('mean_steps' = mean(steps, na.rm = TRUE))
g <- ggplot(data = dt7, aes(x = interval, y = mean_steps)) + geom_line() + facet_grid(days~.)
g
#ggplotly(g)
dt7 <- dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse('wday'<6,'week','weekend'))
View(dt7)
str(dt7)
library(lubridate)
library(ggplot2)
dt7 <- dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse(wday<6,'week','weekend'))
dt7 <- dt7 %>% group_by(days, interval) %>% summarize('mean_steps' = mean(steps, na.rm = TRUE))
g <- ggplot(data = dt7, aes(x = interval, y = mean_steps)) + geom_line() + facet_grid(days~.)
g
#ggplotly(g)
library(lubridate)
library(ggplot2)
dt7 <- dt %>% mutate('wday'=wday(date)) %>% mutate('days' = ifelse(wday<6,'week','weekend'))
dt7 <- dt7 %>% group_by(days, interval) %>% summarize('mean_steps' = mean(steps, na.rm = TRUE))
g <- ggplot(data = dt7, aes(x = interval, y = mean_steps)) + geom_line() + facet_grid(days~.)
ggplotly(g)
knit2html()
library(knitr)
knit2html()
knit2html(input = "PA1_template.Rmd")
knit2html(input = "PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
